import 'dart:io';

import 'package:path_provider/path_provider.dart';
import 'package:vocechat_client/api/lib/resource_api.dart';
import 'package:vocechat_client/app.dart';
import 'package:vocechat_client/dao/init_dao/group_info.dart';
import 'package:vocechat_client/services/file_handler/voce_file_handler.dart';
import 'package:path/path.dart';

class ChannelAvatarHandler extends VoceFileHandler {
  static const String _pathStr = "channel_avatar";

  /// Constructor
  ///
  /// File name should be generated by [generateFileName],
  /// format: gid.png
  ChannelAvatarHandler() : super();

  /// Should insert a png file.
  @override
  Future<String> filePath(String fileName,
      {String? chatId, String? dbName}) async {
    final directory = await getApplicationDocumentsDirectory();
    final databaseName = dbName ?? App.app.userDb?.dbName;
    try {
      if (databaseName != null && databaseName.isNotEmpty) {
        return "${directory.path}/file/${App.app.userDb!.dbName}/$_pathStr/$fileName";
      }
    } catch (e) {
      App.logger.severe(e);
    }
    return "";
  }

  static String generateFileName(GroupInfoM groupInfoM) {
    final avatarUpdatedAt = groupInfoM.groupInfo.avatarUpdatedAt;
    return "${groupInfoM.gid}_$avatarUpdatedAt.png";
  }

  /// Read file from local storage, if not exist, fetch from server.
  Future<File?> readOrFetch(GroupInfoM groupInfoM,
      {String? dbName, bool enableServerRetry = false}) async {
    final fileName = generateFileName(groupInfoM);
    final file = await read(fileName, dbName: dbName);
    if (file != null) {
      final avatarFileUpdatedAt =
          int.parse(basenameWithoutExtension(file.path).split("_").last);
      if (avatarFileUpdatedAt == groupInfoM.groupInfo.avatarUpdatedAt) {
        return file;
      }
    }

    try {
      final resourceApi = ResourceApi();
      final res = await resourceApi.getGroupAvatar(groupInfoM.gid,
          enableServerRetry: enableServerRetry);
      if (res != null &&
          res.statusCode == 200 &&
          res.data != null &&
          res.data!.isNotEmpty) {
        return save(generateFileName(groupInfoM), res.data!, dbName: dbName);
      }
    } catch (e) {
      App.logger.warning(e);
    }

    return null;
  }
}
